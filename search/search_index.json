{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Deadline has a modding API that lets you customize the game as well as load custom maps developed in Roblox Studio. This wiki serves to explain the API's functionality.</p> <p>Available guides are on the left side of the screen or in the sidebar menu.</p> <ul> <li>How to use mods</li> <li>How to make mods</li> </ul>"},{"location":"mod-list/","title":"Example mods","text":"<p>Mods and their source available on this website.</p> <p>Direct repo link</p>"},{"location":"mod-list/#mods","title":"Mods","text":"Description Info Link Source code Eotech 552 model Has an example attachment eotech_552.luau attachment_eotech_552.rbxm Template map Has an example custom lighting preset template_map.luau map_template_map.rbxl Test map Old copy of a Deadline map layout mod_testmap.luau map_mod_testmap.rbxl Pool day First proper custom map pool_day.luau map_pool_day.rbxl Autorun test mod_autorun.luau map_autorun_test.rbxl"},{"location":"mod-list/#scripts","title":"Scripts","text":"Description Source Custom Freecam custom_freecam.luau Custom Gamemode custom_gamemode.luau Custom Interactable custom_interactable.luau Killbrick killbrick.luau Onelife gamemode onelife.luau UI test ui_test.luau"},{"location":"making-mods/","title":"Index","text":"<p>Scripts are written in barebones Luau with Deadline-only globals (game is replaced with game modules). Modfiles are developed in Roblox Studio, so download that if you want to make maps</p>"},{"location":"making-mods/#how-to","title":"How-to","text":"<p>Generally, you want to</p> <ul> <li>Install the plugin<ul> <li>Get the plugin from here. there's a place file you can view a test mod from as well</li> <li>Open the template mod place provided in the releases page</li> <li>Go to plugins, click \"Plugins Folder\", drop the <code>Plugin.rbxmx</code> file in there</li> <li>Restart Studio</li> <li>If you go to the Plugins tab after opening a place in Roblox Studio, you should see a button called \"Deadline modding\"</li> <li>Click it to open the plugin window</li> </ul> </li> <li>Get a mod studio place you can work on (examples here)<ul> <li>Download one and open it with Roblox Studio</li> </ul> </li> <li>Export the mod<ul> <li>Open the output (View-&gt;Output) to see any errors when exporting</li> <li>Open the plugin (Plugins-&gt;DeadlineSDK in Studio), click on workspace.DeadlineTestMod in the explorer, or the mod folder you have</li> <li>Click \"export selected model as mod\" in the plugin menu</li> </ul> </li> <li>Save the mod<ul> <li>The plugin either prompts you a URL, or prompts to save to a file.</li> <li>The URL is a link to your mod source that you can load ONLY ONCE.. CTRl+A the contents of it and save it somewhere else.</li> <li>If it's a file, it's already saved where you chose to do it.</li> </ul> </li> <li>Get a private Deadline server<ul> <li>Dev branch and 0.23.0 VIP servers are free</li> </ul> </li> <li>Load the mod<ul> <li>Copy-paste the contents of the mod to the server console tab</li> <li>The game will probably freeze. Once done, press enter and the mod will load</li> </ul> </li> </ul>"},{"location":"making-mods/attachments/","title":"Attachments","text":"<p>TODO. Adding attachments is possible, but undocumented.</p> <p>For the time being, check the source of the eotech 552 attachment</p>"},{"location":"making-mods/mapping/autorun/","title":"Autorun","text":"<p>Autorun is a mechanism for making running scripts alongside maps easier.</p>"},{"location":"making-mods/mapping/autorun/#modfile-autorun","title":"Modfile autorun","text":"<p>Mod autorun is a ModuleScript inside the mod itself called \"autorun\" that runs when the mod is loaded. You can see an example mod in the mod list.</p>"},{"location":"making-mods/mapping/autorun/#vip-server-autorun","title":"VIP server autorun","text":"<p>Server autorun is the autorun tabs inside the private server console. The server autorun runs when the VIP server starts letting you load a map without having to join yourself after the server restarts and the client autorun runs per-client.</p>"},{"location":"making-mods/mapping/interactables/","title":"Interactables","text":"<p>Interactables are objects you can press F on. The game currently has a few.</p>"},{"location":"making-mods/mapping/interactables/#how-to","title":"How-to","text":"<p>To create an interactable object, make a model, give it an \"interactable\" tag, and give it the following interactable_type attribute:</p> <ul> <li>ammo_refill<ul> <li>Refills your ammo instantly</li> </ul> </li> <li>capture_refill<ul> <li>Refills your ammo if the given point is captured (defined with interactable_domination_point, 0 for Alpha, 1 for Beta and so on)</li> <li>Has a cooldown</li> </ul> </li> <li>door<ul> <li>Door. Has a very specific, undocumented structure</li> <li>Example: door.rbxm</li> </ul> </li> <li>light_switch<ul> <li>When interacted with, toggles all lights inside the model. Structure is undocumented</li> </ul> </li> <li>custom<ul> <li>You can create your own interactable logic. Check the custom_interactable.luau mod in the mod manifest.</li> </ul> </li> <li>weapon_switch<ul> <li>Switches your weapon. Currently requires the setup as JSON, which makes it useless for modding. You can create a custom interactable that replaces weapon_switch instead.</li> </ul> </li> </ul> <p>To define the interaction point, create an attachment called \"display_point\" anywhere inside the model. After that your interactable should work.</p>"},{"location":"making-mods/mapping/ladders/","title":"Ladders","text":"<p>In vague terms, ladders are just lines between which the player can move between regardless of gravity. There is a model available here</p> <p></p>"},{"location":"making-mods/mapping/lighting/","title":"Lighting Presets","text":"<p>Deadline sets the game lighting based on \"lighting presets\". Every map has a custom one, and these lighting presets can also now change material variants, relabel materials, and change custom fog settings.</p>"},{"location":"making-mods/mapping/lighting/#creating-new-lighting-presets","title":"Creating new lighting presets","text":"<p>You need a ModuleScript inside the lighting_presets folder with correct data. Once created, it can be set either in the map properties or with <code>map.set_preset(\"YOUR_PRESET\")</code>. There is an example mod with a custom lighting preset available to see how this works.</p>"},{"location":"making-mods/mapping/limitations/","title":"Limitations","text":"<p>This is a list of instances the modding API can't (and probably won't for a long time) support. If the information here becomes wrong, you can make a post about it in the Deadline server.</p> Name Use Reason Forever? MeshPart Mesh models with collisions MeshParts are not editable at runtime Until EditableMesh releases(?), depending on the limitations of the API provided Terrain Terrain Massive file size overhead, inconvenient voxel API for reading/writing it Until I can be bothered to figure out how to store it, and when large mods become importable MaterialVariant Custom textures MaterialVariants are not editable at runtime Yes - Unless Roblox changes their API SurfaceAppearance PBR PBR is not editable at runtime Yes - Unless Roblox changes their API ParticleEmitter Particles I'm lazy No. But I am pretty lazy"},{"location":"making-mods/mapping/prefabs/","title":"Prefabs","text":"<p>Some more functional models (range targets, ammo boxes) can't be done with modding support and should rather be placed in by the game. Simply drop in the bricks in the prefabs model into your map and they should export correctly.</p> <p>If you want more prefab models added, ask in the Deadline Discord</p>"},{"location":"making-mods/mapping/prefabs/#caveats","title":"Caveats","text":"<ul> <li>Test orientations yourself. I can't automatically generate previews for them</li> <li>Changing the size of the bricks does nothing. They are just shaped with the models for ease of use</li> <li>Internally, they work based on the <code>dl_prefab</code> tag and <code>prefab_name</code> attribute. Don't edit them.</li> </ul>"},{"location":"making-mods/mapping/shootables/","title":"Shootables","text":"<p>Interactions with objects when shot:</p> <ul> <li>Unanchored objects will be pushed by physics</li> <li>Transparent glass objects will be destroyed unless they have a glass_invincible attribute set</li> <li>Neon turns into glass when shot</li> </ul>"},{"location":"making-mods/mapping/terrain/","title":"Terrain","text":"<p>To export terrain, you have to have only one map in the mod. In that map's properties, do this:</p> Lua<pre><code>return {\n    code = \"... your map code ...\",\n\n    -- for maps with terrain:\n    load_terrain = true,\n    -- ...\n</code></pre> <p>This will make the game load the terrain.</p> <p>** THIS DOESN'T WORK RIGHT NOW. **</p>"},{"location":"making-mods/scripting/","title":"Introduction","text":"<p>There's a new Luau scripting tool available in VIP servers in the dev branch as well as 0.23.0 game versions and onward that exposes functions used by the game directly.</p>"},{"location":"making-mods/scripting/#running-code","title":"Running code","text":"<p>VIP servers can run code in the console. You can also use autorun, which is a script that will run every time the VIP server starts, allowing you to have servers set themselves up without your involvement. More info about autorun here.</p> <p>The client can also change sounds played by the game, create custom UI widgets, load map/attachment mods, talk to the server, etc.</p>"},{"location":"making-mods/scripting/#example","title":"Example","text":"Lua<pre><code>---@diagnostic disable: undefined-global\n\nif not is_private_server() and not is_studio() then\n    return\nend\n\nlocal prefix = \"/\"\n\n-- when player sends something in the chat, check if it's a command\nchat.player_chatted:Connect(function(sender, channel, content)\n    local command = content:split(\" \")[1]\n    local first_letter = command:sub(1, 1)\n\n    -- if the first letter is the prefix, then it's a command\n    if first_letter ~= prefix then\n        return\n    end\n\n    -- use the command without the prefix\n    command = command:sub(2, -1)\n\n    local str = string.format(\"hi, %s! Ran command: %s\", sender, command)\n    chat.send_announcement(str, Color3.fromRGB(227, 93, 244))\nend)\n</code></pre>"},{"location":"making-mods/scripting/api/","title":"API","text":"<p>What you want to to might be already implemented. Just Ctrl+F on this page or use the search feature on the wiki.</p>"},{"location":"making-mods/scripting/api/#shared-globals","title":"Shared globals","text":""},{"location":"making-mods/scripting/api/#classes","title":"classes","text":"Lua<pre><code>-- the timer class\n-- it allows you to fire an event once per 5 seconds while running in renderstep\nlocal timer = Timer.new(5)\nlocal connection;\n\nconnection = time.renderstep(\"my script label\", function(delta_time)\n    if timer:expired() then\n        timer:reset()\n        connection:Disconnect()\n\n        print('5 seconds passed')\n    end\nend)\n\n-- spring class\n-- it's just a spring implementation\n--                        mass?: number, force?: number, damping?: number, speed?: number\nlocal spring = Spring.new(0.8, 40, 6, 1.9)\nspring:shove(Vector3.new(10, 0, 0))\nspring:update(delta_time)\n</code></pre>"},{"location":"making-mods/scripting/api/#time","title":"time","text":"Lua<pre><code>-- Timescale, used internally by the game\n\n-- this is a replacement for RenderStepped. delta_time is multiplied by game speed\nlocal c = time.renderstep(\"my script label\", function(delta_time)\n\nend)\n\nc:Disconnect()\n\n-- this is a replacement for Heartbeat. delta_time is multiplied by game speed\ntime.heartbeat(\"my script label\", function(delta_time)\n\nend)\n\ntime.local_timescale_changed:Connect(function()\n    print('timescale has changed')\nend) -- fires when timescale changes. Only used at the match ending\n\ntime.set_local_timescale(1) -- set local timescale, only used by the client\ntime.get_speed() -- gets current game speed\n\n-- this is a replacement for task.delay affected by game_speed\ntime.delay(5, function()\n\nend)\n\n-- replacement for task.wait() affected by game speed\ntime.wait(5)\n</code></pre>"},{"location":"making-mods/scripting/api/#tags","title":"tags","text":"Lua<pre><code>-- you can access the position and size data of CollectionService tagged instances in your maps with the tags namespace.\n-- get_tagged gets tagged instances in workspace (current map)\n-- get_all_tagged gets all instances (lets you load maps as models and then spawn them in)\n\nprint(tags.get_tags()) --&gt; returns a list of every tag used by the game\nprint(tags.get_tagged(\"_killbox\")) --&gt; returns a list of every part tagged with _killbox.\n-- parts will have position, name, orientation, position, and size defined\n-- everything else only has name at the moment\n</code></pre>"},{"location":"making-mods/scripting/api/#instance","title":"instance","text":"Lua<pre><code>-- there is a wrapped luau instance which allows editing most properties of instances\n-- returns a metatable with some functions\n\nlocal sound = tags.get_tagged(\"sound_alarm\")[1]\nsound.play() -- for playing sound\n\n-- you can also create any instance\nlocal highlight = create_instance(\"Highlight\")\nhighlight.Parent = character\nhighlight.Name = \"highlight\"\n\n-- you can also create sounds specifically directly\nlocal sound = sound.create()\n\n-- cloning instances\nlocal clone = sound.clone()\nclone.Parent = sound\nclone.destroy()\n\n-- works\nsound.Volume = 0.5\nprint(sound.get_tags()) --&gt; returns a list of every tag the instance has\n\n-- method and instance properties don't work\nprint(sound.Parent)\n\n-- attributes and tags can be set\nsound.add_tag(\"tag\")\nsound.remove_tag(\"tag\")\n\nsound.set_attribute(\"attribute\", true)\nsound.get_attribute(\"attribute\")\n\n-- models. You can move entire models with pivot_to\nmodel.pivot_to(model.get_pivot() * CFrame.Angles(0.1, 0, 0))\n\n-- physics\ninstance.apply_impulse_at_position(Vector3.new(0, 0, 0), Vector3.new(0, 0, 0))\ninstance.apply_angular_impulse_at_position(Vector3.new(0, 0, 0), Vector3.new(0, 0, 0))\ninstance.apply_impulse(Vector3.new(0, 0, 0))\ninstance.set_network_owner(nil)\ninstance.set_network_owner(\"MyName\")\n\n-- some util functions\n-- you can parent things to the map directly with get_map_root()\ninstance.Parent = get_map_root()\n\n-- you can also get the character folder\ninstance.Parent = get_chars_root()\n\n-- this helps with cloned instances that should disappear when the map is unloaded\n</code></pre>"},{"location":"making-mods/scripting/api/#sharedvars","title":"sharedvars","text":"Lua<pre><code>-- The game has a list of variables that control the game settings for different players. They are called in a table called shared state.\n-- sharedvars and sharedvars_descriptions exposes this in a simple API\n-- the game has over 100 changeable settings. Check them to make sure\n-- what you might want to do isn't already configurable.\n\n-- there is another page about this on the wiki\n\nfor name, description in pairs(sharedvars_descriptions) do\n    print(name, description) --&gt; prints every sharedvars value\nend\n\nfor name, description in pairs(sharedvars) do\n    -- iterating over sharedvars doesn't work because it's a metatable\n    -- this will do nothing\n    print(name, description)\nend\n\nsharedvars.chat_tips_enabled = false -- disables chat tips, only works on the server\nprint(sharedvars.chat_tips_enabled) -- false\n</code></pre>"},{"location":"making-mods/scripting/api/#shared","title":"shared","text":"Lua<pre><code>-- this is just persistent script storage\nshared.value = 5\n\n-- from another script\nprint(shared.value) --&gt; 5\n</code></pre>"},{"location":"making-mods/scripting/api/#console","title":"console","text":"Lua<pre><code>print(\"hello world\") -- self explanatory\nclear_console() -- clears the console output\n</code></pre>"},{"location":"making-mods/scripting/api/#query","title":"query","text":"Lua<pre><code>-- API for spacial queries, etc\nlocal raycast_params = query.create_raycast_params()\nraycast_params.filter_descendants_instances({ car })\nraycast_params.filter_type(Enum.RaycastFilterType.Exclude)\n\n-- same returns as workspace.Raycast, just lowercase\nlocal hit = query.raycast(position, direction * suspension_length, raycast_params)\nprint(result.instance.Name)\n</code></pre>"},{"location":"making-mods/scripting/api/#server-globals","title":"Server globals","text":""},{"location":"making-mods/scripting/api/#require","title":"require","text":"Lua<pre><code>-- sets the domain for all require() calls\nset_require_domain(\"https://raw.githubusercontent.com/blackshibe/deadline-insitux-core-scripts/master/\")\n\n-- actually requires https://raw.githubusercontent.com/blackshibe/deadline-insitux-core-scripts/master/luau/server/gamemode_setup.lua\nrequire(\"luau/server/gamemode_setup.lua\")\nrequire(\"luau/server/vip_command_bot.lua\")\n</code></pre>"},{"location":"making-mods/scripting/api/#map","title":"map","text":"Lua<pre><code>-- ServerMap - for managing the maps\n\nmap.set_map(\"shipment\") -- changes the map immediately, kills all players\nmap.set_preset(\"shipment\") -- changes the preset. available presets are in config.lighting_presets\n\n-- run_vote uses config.maps.MAP_CONFIGURATION. You can add custom entries there\nlocal voted_map = map.run_vote() -- runs a vote for a random map. returns a game config for that map\nmap.set_map_from_config(config.maps.MAP_CONFIGURATION[voted_map]); -- sets the map, gamemode, and time from a config\n\n-- can also just do this\nmap.set_map_from_config(config.maps.MAP_CONFIGURATION.shipment_01)\n\nmap.set_time(10) -- sets the time 10AM (not including sharedvars.sv_time_offset)\nsharedvars.sv_time_offset = 10 -- moves the time by 10 hours\n\n-- show available maps\nfor name, value in map.get_maps() do\n    print(name, value)\nend\n</code></pre>"},{"location":"making-mods/scripting/api/#gamemode","title":"gamemode","text":"Lua<pre><code>gamemode.set_gamemode(\"koth\") -- sets the gamemode\ngamemode.force_set_gamemode(\"koth\") -- sets the gamemode without changing the map(?)\n\n-- show available gamemodes\nfor name in gamemode.available_gamemodes do\n    print(name)\nend\n\ngamemode.finished:Connect(function(avoid_resetting_map)\nend) -- fires when a game ends\n\ngamemode.started:Connect(function()\nend) -- fires when a game starts\n</code></pre>"},{"location":"making-mods/scripting/api/#chat-text","title":"chat, text","text":"Lua<pre><code>-- ChatManager - for managing the chat\nchat.player_chatted:Connect(function(sender, channel, content)\n    local command = content:split(\" \")[1]\n    local first_letter = command:sub(1, 1)\n\n    -- if the first letter is the prefix, then it's a command\n    if first_letter ~= prefix then\n        return\n    end\n\n    -- use the command without the prefix\n    command = command:sub(2, -1)\n\n    local str = string.format(\"hi, %s! Ran command: %s\", sender, command)\n    chat.send_announcement(str, Color3.fromRGB(227, 93, 244)) -- chat.send_announcement - sends an announcement in the chat\nend)\n\nchat.set_spawning_disabled_reason(\"Reason why spawning is disabled\") --&gt; when players can't spawn this text will show up filtered in a prompt\nsharedvars.sv_spawning_enabled = false\n\n-- sends an ingame notification text to players\nchat.send_ingame_notification(\"Hello world\")\n\n-- lol\nsound.play_sick_riff()\n</code></pre>"},{"location":"making-mods/scripting/api/#players","title":"players","text":"Lua<pre><code>-- you can access player data from luau\n-- this script kills anyone who steps inside a part tagged with \"deleteme\"\n\nlocal function is_point_inside_part(point, part)\n    local offset = part.cframe:pointToObjectSpace(point)\n    return math.abs(offset.X) &lt;= part.size.X / 2\n        and math.abs(offset.Y) &lt;= part.size.Y / 2\n        and math.abs(offset.Z) &lt;= part.size.Z / 2\nend\n\ntime.heartbeat(\"check_killbox\", function()\n    for _, killbox in pairs(tags.get_tagged(\"kill_box\")) do\n        for _, player in pairs(players.get_all()) do -- or players.get_alive\n            local position = player.get_position() -- returns nil if the player is dead\n\n            if not position then\n                continue\n            end\n\n            if is_point_inside_part(position, killbox) then\n                player.kill()\n                print(\"killed\", player.name)\n            end\n        end\n    end\nend)\n\nlocal player = players.get(\"MyName\") or players.get_by_userid(1000)\n\n-- functions:\nplayer.kill()\nplayer.explode()\nplayer.kick()\nplayer.set_team(\"defender\")\nplayer.set_team(\"attacker\")\nprint(player.is_bot())\nprint(player.get_team()) --&gt; attacker\nplayer.spawn() -- spawns the player if they are not already spawned\nplayer.respawn() -- force respawns the player, even if they are already spawned\n\n-- player id is unique, userid is userid\nprint(player.id)\nprint(player.player_id)\n\n-- overrides\nplayer.set_position(Vector3.new(0, 1000, 0))\nplayer.set_position(tags.get_tagged(\"spawn_point\")[0].position)\nprint(player.get_position())\n\nplayer.set_speed(5)\nplayer.set_jump_multiplier(1)\nplayer.set_health(200)\nplayer.set_initial_health(200) -- doesn't work immediately\nplayer.set_camera_mode(\"Freecam\")\nplayer.set_model(\"orchids_pbr_set\")\nplayer.ban_from_server() -- works same as votekicking someone\nplayer.refill_ammo()\n\nplayer.equip_weapon(\"secondary\", true) -- immediately forces the player to equip their secondary\nplayer.equip_weapon(\"throwable1\") -- forces the player to switch to their 1st grenade\n\nprint(player.get_profile_stats()) -- lets you get player profile stats\nprint(player.get_leaderboard_stats()) -- returns player leaderboard stats\n\non_player_spawned:Connect(function(name)\n    print(\"player spawned:\", name)\nend)\n\non_player_joined:Connect(function(name)\n    print(\"player joined:\", name)\nend)\n\non_player_left:Connect(function(name)\n    print(\"player left:\", name)\nend)\n\non_player_died:Connect(function(name, position, killer_data, stats_counted)\n    -- mostly same data the game uses\n\n    print(name, \"died to\", killer_data.type) -- can be burning, drowning, firearm, grenade, map_reset, other, reset\nend)\n\n-- import weapon from a code\nlocal setup = weapons.get_setup_from_code(\"4f42-02212-zh1g-3oaa-ozhz-z3nb-caa9-61wo\") -- this specific setup only works in dev branch\n\nif setup.status ~= \"_\" then\n    warn(\"setup is not valid\")\nelse\n    -- 1st argument is primary, secondary\n    player.set_weapon(\"primary\", \"M4A1\", setup.data.data)\nend\n\n-- refilling grenades\nplayer.set_utility(\"throwable1\", \"F1\")\nplayers.get(\"BIackShibe\").set_utility(\"primary\", \"F1\")\n\n-- you can check if it's broken with get_setup_status\nlocal setup = weapons.get_setup_from_code(\"cn8q-0231-31bq-zg6d-8m54-g906-o50c-m1f7\")\nlocal status = weapons.get_setup_status(setup.data)\n\nprint(status)\nif type(status) ~= \"string\" then\n    -- all problems unrelated to picatinny\n    for i, v in pairs(status.state) do\n        print(i, v)\n    end\n\n    -- rail problems\n    for _, entry in pairs(status.rail_state.failures) do\n        for i, v in pairs(entry) do\n            print(i, v)\n        end\n    end\nend\n\n-- or from the player loadout\n-- 1st argument is loadout number, starts from 0, 1 is 2nd loadout\n-- 2nd argument is primary, secondary, throwable1, throwable2\nlocal loadout_data = player.get_weapon_from_loadout(1, \"primary\")\nplayer.set_weapon(\"secondary\", loadout_data.weapon, loadout_data.data)\n\n-- or from the character\nlocal player_weapon = player.get_weapon_data_from_character(\"primary\")\n\n-- get the setup for the primary weapon and set it to the secondary\nplayer.set_weapon(\"secondary\", player_weapon.client_data.name, player_weapon.client_data.setup)\n\n-- this has other info\nprint(player_weapon.ammo) -- player ammo table. modifying it is unpredictable so don't\nprint(player_weapon.client_data.laser_enabled)\n\n-- or you can just save the setup to a string\n-- this doesn't work right now because you can't copy the setup after printing it lmao\nlocal data = \"... JSON\"\nplayer.set_weapon(\"secondary\", \"M4A1\", data)\n\n-- or you can just remove their gun\nplayer.set_weapon(\"secondary\", \"nothing\")\n\n-- spawns an M67 grenade explosion\nspawning.explosion(Vector3.new(0, 100, 0))\n\n-- deletes all ragdolls\nplayers.reset_ragdolls()\n</code></pre>"},{"location":"making-mods/scripting/api/#spawning","title":"spawning","text":"Lua<pre><code>-- you can spawn game objects\n\n-- spawns an M67 grenade explosion\nspawning.explosion(Vector3.new(0, 100, 0))\n\n-- spawns a bot\n-- they are treated like regular players, but right now don't do anything but walk towards people\nlocal bot_name = spawning.bot()\n\n-- ...\n</code></pre>"},{"location":"making-mods/scripting/api/#config","title":"config","text":"Lua<pre><code>-- config has most game configs\n\nfor name, data in pairs(config.maps) do\n    print(name)\nend\n\n-- opens the map configuration used in studio\nmap.set_map_from_config(config.maps.STUDIO_CONFIGURATION())\n\n-- these can be used with map.set_preset(\"name\")\n-- on the client, you can modify them directly\n-- on the server, you may load new ones for players to use with modfiles\nfor name, data in pairs(config.lighting_presets) do\n    print(name)\nend\n\n-- these can be used for maps' sound_preset property\nfor name, data in pairs(config.sound_presets) do\n    print(name)\nend\n\n-- every weapon in the game\nfor _, name in pairs(config.weapon_names) do\n    print(name)\nend\n\n-- every utility in the game\nfor _, name in pairs(config.utility_items) do\n    print(name)\nend\n</code></pre>"},{"location":"making-mods/scripting/api/#game-data","title":"game data","text":"Lua<pre><code>-- game data includes current game state (map, gamemode, so on)\nprint(game_data.lighting.value) -- print current lighting\nprint(game_data.map_properties.value.lighting_preset) -- or this way\n\n-- print map config data\nfor name, data in pairs(game_data.map_config.value) do\n    print(name, data)\nend\n\n-- to show all values\nfor name, data in pairs(game_data) do\n    print(name)\nend\n</code></pre>"},{"location":"making-mods/scripting/api/#mods","title":"mods","text":"Lua<pre><code>load_modfile(\"DATA\") --&gt; loads a modfile to the game\n\n-- cleanup\non_modfile_loaded:Connect(function()\n    print(\"another modfile was loaded\")\nend)\n</code></pre>"},{"location":"making-mods/scripting/api/#networking","title":"networking","text":"Lua<pre><code>-- ...from the client\nfire_server(1)\n\n-- ...on the server\non_client_event:Connect(function(player, args)\n    print(player, args)\nend)\n\n-- ... from the server\nplayers.get(\"me\").fire_client(123)\n\n-- ... on the client\non_server_event:Connect(function(args)\n    print(args)\nend)\n</code></pre>"},{"location":"making-mods/scripting/api/#client-globals","title":"Client globals","text":""},{"location":"making-mods/scripting/api/#general","title":"general","text":"Lua<pre><code>print(local_player) -- prints the local_player's name\n</code></pre>"},{"location":"making-mods/scripting/api/#config_1","title":"config","text":"Lua<pre><code>-- the config table is different on the client. it has sounds that can be replaced directly\nfor name, value in pairs(config.gunshots) do\n    print(name, value)\n    config.gunshots[name] = \"rbxassetid://funny sound\" -- it can be replaced\nend\n\n-- same for most game sounds\nfor name, value in pairs(config.game_sounds) do\n    print(name, value) -- table of tables\nend\n</code></pre>"},{"location":"making-mods/scripting/api/#inputs","title":"inputs","text":"Lua<pre><code>-- this module abstracts game input\n\nprint(input.get_mouse_delta()) -- equivalent to UserInputService:GetMouseDelta()\nprint(input.get_mouse_sensitivity()) -- gets the player sensitivity settings\nprint(input.get_mouse_origin()) -- Mouse.Origin\nprint(input.get_mouse_position()) -- UserInputService.GetMouseLocation()\n\n-- InputGroup is also exposed, as well as ClientInputGroup\n-- the input code is a table index to config.keybinds\n\n-- ClientInputGroup uses client settings\nlocal client_input_group = ClientInputGroup.new()\nlocal input_group = InputGroup.new()\n\nclient_input_group:bind_user_setting(function()\n    print(\"started pressing W\")\nend, InputType.Began, \"move_forward\")\n\nclient_input_group:bind_user_setting(function()\n    print(\"stopped pressing W\")\nend, InputType.Ended, \"move_forward\")\n\ninput_group:bind_key(function()\n        print(\"pressed f\")\n    end,\n    InputType.Began,\n    false,           -- ignore game processed\n    Enum.KeyCode.F   -- keycode\n)\n\ninput_group:bind_key(function()\n        print(\"stopped pressing f\")\n    end,\n    InputType.Ended,\n    false,           -- ignore game processed\n    Enum.KeyCode.F   -- keycode\n)\n\nclient_input_group:disconnect_all_binds()\ninput_group:disconnect_all_binds()\n\n-- every keybind is available here. you may or may not be able to add custom ones\nfor i, v in pairs(config.keybinds) do\n    print(i, v)\nend\n\n-- if you do you also have to add an entry for it in the client settings\ntable.insert(config.settings_layout.controls, { setting = \"toggle_godmode\", type = \"setting\" })\n</code></pre>"},{"location":"making-mods/scripting/api/#framework","title":"framework","text":"Lua<pre><code>-- not many functions for now\nframework.character.is_alive() -- gets whether you're alive\nframework.character.get_position() -- returns character position\nframework.character.get_camera_cframe() -- gets the camera cframe\n\n-- force nvg\nframework.character.set_nv_enabled(true)\n\nframework.character.is_nv_enabled() -- also includes whether an nv scope is enabled\nframework.character.is_nv_head_gear_enabled() -- only applies to night vision\n\n-- spawn &amp; death event\nframework.on_spawned:Connect(function()\n    print(\"spawned\")\nend)\n\nframework.on_died:Connect(function()\n    print(\"spawned\")\nend)\n</code></pre>"},{"location":"making-mods/scripting/api/#interactables","title":"interactables","text":"Lua<pre><code>-- the game has interactable items such as ammo refills, doors, light switches and weapons (wip)\n-- you can override their behavior or create new ones here\n\nlocal CustomInteractable = {}\nCustomInteractable.__index = CustomInteractable\n\nfunction CustomInteractable.new(instance)\n    local self = {\n        players_killed = 0,\n        instance = instance,\n    }\n\n    return setmetatable(self, CustomInteractable)\nend\n\nfunction CustomInteractable:interact(player)\n    self.players_killed += 1\n    player.explode()\n    player.kill()\n    chat.send_announcement(`{self.players_killed} players killed total`)\nend\n\n-- replaces all ammo refill interactables in usual maps with this custom logic\n-- doors use \"door\"\nregister_interactable(\"ammo_refill\", CustomInteractable)\nregister_interactable(\"capture_refill\", CustomInteractable)\n\n-- any model that has an Attachment instance named display_point, and an attribute called\n-- \"interactable_type\" set to \"part_killer\" will have a pop up UI show that runs this code\n-- when interacted with\nregister_interactable(\"part_killer\", CustomInteractable)\n\n-- the map has to be reloaded before they work\nmap.set_map(\"misc_shooting_range\")\n</code></pre>"},{"location":"making-mods/scripting/api/#camera-control","title":"camera control","text":"Lua<pre><code>-- you can register a custom camera controller\n-- author: blackshibe\n-- version: 0.23.0 dev\n-- description: creates a class and registers it as a custom camera controller component\n\nlocal CustomFreecam = {}\nCustomFreecam.__index = CustomFreecam\n\nfunction CustomFreecam.new(get_head_cframe)\n    local self = {\n        get_head_cframe = get_head_cframe,\n\n        cam_position = CFrame.new(-35.25, 135.662, 8.242),\n        rot_x = 0,\n        rot_y = 0,\n\n        min_roll = -math.pi / 2 + 0.2,\n        max_roll = math.pi / 2 - 0.2,\n    }\n\n    return setmetatable(self, CustomFreecam)\nend\n\nfunction CustomFreecam:update(delta_time)\n    local mouse_delta = input.get_mouse_delta() * 0.0075 * input.get_mouse_sensitivity()\n    local camera_cframe = self.cam_position\n\n    self.rot_y -= mouse_delta.Y\n    self.rot_y = math.clamp(self.rot_y, self.min_roll, self.max_roll)\n    self.rot_x -= mouse_delta.X\n\n    camera_cframe *= CFrame.Angles(0, self.rot_x, 0) * CFrame.Angles(self.rot_y, 0, 0) * CFrame.Angles(\n        0,\n        0,\n        -self.roll or 0\n    )\n\n    camera_cframe = camera_cframe:ToWorldSpace(\n        CFrame.new(\n            -self.input.movementX * delta_time * 90,\n            self.input.movementZ * delta_time * 90,\n            -self.input.movementY * delta_time * 90\n        )\n    )\n\n    self.camera_cframe = camera_cframe\n    self.cam_position = CFrame.new(camera_cframe.Position)\nend\n\n-- can also use Default to overwrite default cameramode\nregister_camera_mode(\"CustomFreecam\", CustomFreecam)\n\n-- on the server\nplayers.get(\"me\").set_custom_camera_mode(\"CustomFreecam\")\n</code></pre>"},{"location":"making-mods/scripting/api/#ui","title":"ui","text":"Lua<pre><code>-- you can render simple UIs on the client\nui.clear()\nui.render({\n    {\n        type = \"widget\",\n        id = \"widget_id\",\n        title = \"helo\",\n        members = {\n            {\n                type = \"text\",\n                text = \"hi\",\n            },\n            {\n                type = \"button\",\n                callback = function()\n                    print(\"button clicked\")\n                end,\n            },\n            {\n                type = \"textbox\",\n                changed = function(value)\n                    print(value)\n                end,\n                text = \"slider\",\n            },\n            {\n                type = \"slider\",\n                id = \"slider1\",\n                changed = function(value)\n                    -- you can declare ids on objects to change their properties on the fly\n                    -- the slider won't move unless you do this in the changed event\n                    ui.patch_by_id(\"slider1\", {\n                        value = value,\n                    })\n                end,\n            },\n        },\n    },\n    {\n        type = \"floating_widget\",\n        id = \"widget_id_2\",\n        title = \"floating hello\",\n        size = { 200, 100 },\n        visible = true,\n        members = {\n            {\n                type = \"text\",\n                text = \"hi\",\n            },\n            {\n                type = \"button\",\n                text = \"clear console\",\n                callback = function()\n                    clear_console()\n                    -- can also do network comms here\n                    fire_server(\"clear console idk\")\n                end,\n            },\n        },\n    },\n})\n\n-- iris is also included\n-- https://sirmallard.github.io/Iris/\niris:Connect(function()\n    iris.Window({\"My Second Window\"})\n        iris.Text({\"The current time is: \" .. tick()})\n\n        iris.InputText({\"Enter Text\"})\n\n        if iris.Button({\"Click me\"}).clicked() then\n            print(\"button was clicked\")\n        end\n\n        iris.InputColor4()\n\n        iris.Tree()\n            for i = 1,8 do\n                iris.Text({\"Text in a loop: \" .. i})\n            end\n        iris.End()\n    iris.End()\nend)\n</code></pre>"},{"location":"making-mods/scripting/sharedvars/","title":"Sharedvars","text":"<p>The game has a list of variables that control the game settings for different players. They are called in a table called shared state. They are split into read-only and readable. They also have different data types</p>"},{"location":"making-mods/scripting/sharedvars/#finding-the-one-you-want-and-changing-it","title":"Finding the one you want and changing it","text":"<p>Run this in the server console:</p> Lua<pre><code>for name, description in pairs(sharedvars_descriptions) do\n    print(name, description) --&gt; prints every sharedvars value\nend\n</code></pre> <p>It will print the contents of the table with every shared variable. You can then look to see if there is anything related to what you need. You then set it with <code>sharedvars.name = value</code>. Generally,</p> <ul> <li>text is set as strings (e.g. <code>sharedvars.plr_model = \"main\"</code>)</li> <li>numbers as numbers (e.g. <code>sharedvars.plr_recoil = 2</code>)</li> <li>bools (e.g. <code>sharedvars.plr_team_kill = true</code>)</li> <li>with some exceptions like night vision color (e.g. <code>sharedvars.plr_nv_color = Color3.new(1, 0, 0)</code>)</li> </ul>"},{"location":"making-mods/scripting/sharedvars/#some-examples","title":"Some examples","text":"<ul> <li>Game time: you can change game time with <code>sharedvars.sv_time_offset = 10</code></li> <li>Teamkilling: enabled with <code>sharedvars.plr_team_kill = true</code></li> <li>Making the entire game slower: <code>sharedvars.sv_timescale = 0.5</code></li> <li>Disabling editor limits: <code>sharedvars.editor_compatibility_checks = false; sharedvars.editor_mount_anything = true;</code></li> </ul>"},{"location":"using-mods/","title":"Index","text":""},{"location":"using-mods/#public-mods","title":"Public mods","text":"<ul> <li>Official mods</li> <li>The Deadline server has a #modding channel</li> </ul>"},{"location":"using-mods/#starting-out","title":"Starting out","text":"<ul> <li>Get a private server for the Deadline game, then join it</li> <li>Press ` to open the modding console, the key right next to Escape on your keyboard</li> <li>Go to server console</li> <li>You can type scripts and such here</li> </ul>"},{"location":"using-mods/#how-to-load-a-mod","title":"How to load a mod","text":"<ul> <li>Open the selected modfile script. You can find them in the example mod list</li> <li>Copy the FULL contents of the file</li> <li>Paste them to the server console</li> <li>The modfile should load</li> <li>Attachments are accessible immediately. You can set the map with <code>map.set_map(\"map_name\")</code></li> </ul>"}]}